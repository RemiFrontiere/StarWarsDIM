"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const test_1 = require("@schematics/angular/utility/test");
const path = require("path");
const testing_2 = require("../../utils/testing");
describe('ng-add', () => {
    let runner;
    let appTree;
    const defaultOptions = {};
    beforeEach(() => {
        appTree = testing_2.createTestApp();
        testing_2.createCommonWebpackConfig(appTree);
        runner = new testing_1.SchematicTestRunner('schematics', path.join(__dirname, '../collection.json'));
    });
    it('should update package.json', () => {
        const tree = runner.runSchematic('ng-add', defaultOptions, appTree);
        const packageJson = JSON.parse(test_1.getFileContent(tree, '/package.json'));
        expect(packageJson.devDependencies['apply-loader']).toBeDefined();
        expect(packageJson.devDependencies['pug-loader']).toBeDefined();
        expect(packageJson.devDependencies['pug']).toBeDefined();
        expect(packageJson.scripts['postinstall']).toBeDefined();
    });
    it('should add the pug loader in webpack config', () => {
        const tree = runner.runSchematic('ng-add', defaultOptions, appTree);
        const config = eval(test_1.getFileContent(tree, 'node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/webpack-configs/common.js'));
        const pugRule = config.rules[0];
        expect(config.rules.length).toBe(2);
        expect(pugRule.test.toString()).toBe(/.pug$/.toString());
        expect(pugRule.use.length).toBe(2);
        const loaders = pugRule.use.map((loader) => loader.loader);
        expect(loaders).toContain('apply-loader');
        expect(loaders).toContain('pug-loader');
    });
    it('should add script file to root', () => {
        const tree = runner.runSchematic('ng-add', defaultOptions, appTree);
        expect(tree.read('/ng-add-pug-loader.js')).toBeDefined();
    });
    it('should register npm install task', () => {
        runner.runSchematic('ng-add', defaultOptions, appTree);
        const npmInstallTask = runner.tasks[0];
        expect(npmInstallTask).toBeDefined();
        expect(runner.tasks.length).toBe(1);
        expect(npmInstallTask.name).toBe('node-package');
        expect(npmInstallTask.options.command).toBe('install');
    });
});
//# sourceMappingURL=index_spec.js.map